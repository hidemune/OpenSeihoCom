/*
 * Copyright (C) 2017 user
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package openseiho;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.EventListener;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

/**
 *
 * @author user
 */
public class OsText2 extends javax.swing.JPanel {
    OsText2 Pthis;
    JPopupMenu menu = new JPopupMenu() ;

    private String caption = "";
    private int captionWidth = 100;
    
    /**
     * Creates new form OsText2
     */
    public OsText2() {
        initComponents();
        Pthis = this;
    }

    @Override
    public synchronized void addKeyListener(KeyListener l) {
        osText1.addKeyListener(l); //To change body of generated methods, choose Tools | Templates.
    }
    
    public void setText(String value) {
        osText1.setText(value);
    }
    public String getText() {
        return osText1.getText();
    }
    public void setCaption(String caption) {
        this.caption = caption;
        jLabel1.setText(caption);
    }
    public String getCaption() {
        return this.caption;
    }
    public void setCaptionWidth(int width) {
        this.captionWidth = width;
        jLabel1.setPreferredSize(new Dimension(width, this.getHeight()));
        this.repaint();
    }
    public int getCaptionWidth() {
        return this.captionWidth;
    }
    public void setmode(int mode) {
        osText1.setMode(mode);
        
        if (mode == 2) {
            osText1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    Pthis.henkan(e);
                }
            });
        }
        
    }
    public int getMode() {
        return osText1.getMode();
    }
    public void henkan(java.awt.event.ActionEvent e) {
        OsText txt = (OsText)e.getSource();
        
        String search;
        String pre = "";
        if (txt.getHenkanSta() > 0) {
            search = txt.getText().substring(txt.getHenkanSta());
            //if (txt.getHenkanSta()>1) {
                pre = txt.getText().substring(0, txt.getHenkanSta());
            //}
        } else {
            search = txt.getText();
        }
        Pthis.menu.removeAll();
        //CSVファイルの読み込み
        File csv = null;
        boolean find = false;
        try {
            csv = new File("jpname.csv");
            BufferedReader br;
            br = new BufferedReader(new InputStreamReader(new FileInputStream(csv), "utf-8"));
            String line = "";
            
            while ((line = br.readLine()) != null) {
                String[] strArr = line.split("\t");
                String name = strArr[0];
                if (search.equals(name)) {
                    JMenuItem itm = new JMenuItem(strArr[1]);
                    itm.addActionListener(new ActionListenerImpl(Pthis,pre,strArr[1]));
                    menu.add(itm);
                    
                    find = true;
                    //break;
                }
            }
            if (!find) {
                //JOptionPane.showMessageDialog(this, "指定された郵便番号が見つかりません。");
            }
        } catch (FileNotFoundException ex) {
            // Fileオブジェクト生成時の例外捕捉
            ex.printStackTrace();
            //JOptionPane.showMessageDialog(this, "郵便番号CSVファイルがありません。\n" + csv.getAbsolutePath());
        } catch (IOException ex) {
            // BufferedReaderオブジェクトのクローズ時の例外捕捉
            ex.printStackTrace();
            //JOptionPane.showMessageDialog(this, "エラーが発生しました");
        }
        if (find) {
            menu.show(this, 0, 0);
            //menu.show(null, 0, 0);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jLabel1 = new javax.swing.JLabel();
        osText1 = new openseiho.OsText();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("OsText2");
        jLabel1.setMaximumSize(new java.awt.Dimension(100, 16));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 16));
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 16));
        add(jLabel1);

        osText1.setText("osText1");
        add(osText1);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private openseiho.OsText osText1;
    // End of variables declaration//GEN-END:variables

    private static class ActionListenerImpl implements ActionListener {
        String name = "";
        String pre = "";
        OsText2 Pthis;
        public ActionListenerImpl(OsText2 Pthis, String pre, String name) {
            this.name = name;
            this.pre = pre;
            this.Pthis = Pthis;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println(this.name);
            Pthis.setText(this.pre + this.name);
        }
    }
    // イベントを発生させる
    public interface MyKeyListener extends KeyListener {
        public void MyKeyRereased(java.awt.event.KeyEvent e);
    }
}
